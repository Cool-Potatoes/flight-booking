

networks:
  app-network:
    driver: bridge

services:
  # ---------------------
  # Eureka Server
  # ---------------------
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/eureka/" ]
      interval: 20s
      timeout: 5s
      retries: 10
    environment: # Spring 프로파일 명시
      SPRING_PROFILES_ACTIVE: native

  # ---------------------
  # Config Server
  # ---------------------
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - app-network
    links:
      - eureka-server
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    depends_on:
      eureka-server:
        condition: service_healthy  # service_started 대신 service_healthy 사용
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_PROFILES_ACTIVE: native
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/info" ]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # PostgreSQL
  # ---------------------
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: flight_booking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: systempass
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # ---------------------
  # Redis
  # ---------------------
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Zookeeper
  # ---------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------------
  # Kafka
  # ---------------------
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ---------------------
  # Zipkin
  # ---------------------
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------------
  # Prometheus
  # ---------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------------
  # Grafana
  # ---------------------
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------------
  # Gateway Service
  # ---------------------
  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SECRET_KEY: "66mL7J+B7J206rCQ7J6Q65Ok7J2Y7ZWt6rO16raM7JiI66ek7ISc67mE7Iqk66W87Iuc7J6R7ZW067SF64uI64uk"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # User Service
  # ---------------------
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8100:8100"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://postgres:5432/flight_booking
      DB_USERNAME: postgres
      DB_PASSWORD: systempass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SECRET_KEY: "66mL7J+B7J206rCQ7J6Q65Ok7J2Y7ZWt6rO16raM7JiI66ek7ISc67mE7Iqk66W87Iuc7J6R7ZW067SF64uI64uk"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Booking Service
  # ---------------------
  booking-service:
    build: ./booking-service
    container_name: booking-service
    ports:
      - "8120:8120"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://postgres:5432/flight_booking
      DB_USERNAME: postgres
      DB_PASSWORD: systempass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SECRET_KEY: "66mL7J+B7J206rCQ7J6Q65Ok7J2Y7ZWt6rO16raM7JiI66ek7ISc67mE7Iqk66W87Iuc7J6R7ZW067SF64uI64uk"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8120/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Payment Service
  # ---------------------
  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8130:8130"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://postgres:5432/flight_booking
      DB_USERNAME: postgres
      DB_PASSWORD: systempass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SECRET_KEY: "66mL7J+B7J206rCQ7J6Q65Ok7J2Y7ZWt6rO16raM7JiI66ek7ISc67mE7Iqk66W87Iuc7J6R7ZW067SF64uI64uk"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8130/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Flight Service
  # ---------------------
  flight-service:
    build: ./flight-service
    container_name: flight-service
    ports:
      - "8150:8150"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://postgres:5432/flight_booking
      DB_USERNAME: postgres
      DB_PASSWORD: systempass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SECRET_KEY: "66mL7J+B7J206rCQ7J6Q65Ok7J2Y7ZWt6rO16raM7JiI66ek7ISc67mE7Iqk66W87Iuc7J6R7ZW067SF64uI64uk"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8150/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Notification Service
  # ---------------------
  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8160:8160"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://postgres:5432/flight_booking
      DB_USERNAME: postgres
      DB_PASSWORD: systempass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SECRET_KEY: "66mL7J+B7J206rCQ7J6Q65Ok7J2Y7ZWt6rO16raM7JiI66ek7ISc67mE7Iqk66W87Iuc7J6R7ZW067SF64uI64uk"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8160/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local