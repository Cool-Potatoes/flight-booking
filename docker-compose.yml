
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  zookeeper_data:
  kafka_data:

services:
  # 2Ô∏è‚É£ Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  # 3Ô∏è‚É£ Config Server
  config-server:
    build:
      context: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    env_file:
      - .env

  # 4Ô∏è‚É£ Gateway Service
  gateway-service:
    build:
      context: ./gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SECRET_KEY: ${SECRET_KEY}

  # 1Ô∏è‚É£ Common Module (Í≥µÌÜµ Î™®Îìà)
  common:
    build:
      context: ./common
    container_name: common
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
    restart: always # depends_on Ï†úÍ±∞, restart Ï†ïÏ±Ö Ï∂îÍ∞Ä


  # 5Ô∏è‚É£ PostgreSQL
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    networks:
      - app-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # 6Ô∏è‚É£ Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  # 7Ô∏è‚É£ Zookeeper
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - zookeeper_data:/data

  # 8Ô∏è‚É£ Kafka
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # 9Ô∏è‚É£ Zipkin (Î∂ÑÏÇ∞ Ï∂îÏ†Å)
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - app-network

  # üîü Prometheus (Î™®ÎãàÌÑ∞ÎßÅ)
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  # 11Ô∏è‚É£ Grafana (ÏãúÍ∞ÅÌôî)
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network

  # üîî Notification Service
  notification-service:
    build:
      context: ./notification-service
    container_name: notification-service
    ports:
      - "8160:8160"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  # üîë User Service
  user-service:
    build:
      context: ./user-service
    container_name: user-service
    ports:
      - "8100:8100"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  # üì¶ Booking Service
  booking-service:
    build:
      context: ./booking-service
    container_name: booking-service
    ports:
      - "8120:8120"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  # üí≥ Payment Service
  payment-service:
    build:
      context: ./payment-service
    container_name: payment-service
    ports:
      - "8130:8130"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  # ‚úàÔ∏è Flight Service
  flight-service:
    build:
      context: ./flight-service
    container_name: flight-service
    ports:
      - "8150:8150"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  # üéüÔ∏è Ticket Service
  ticket-service:
    build:
      context: ./ticket-service
    container_name: ticket-service
    ports:
      - "8140:8140"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
