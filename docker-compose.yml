version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  # ---------------------
  # Eureka Server
  # ---------------------
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Config Server
  # ---------------------
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Gateway Service
  # ---------------------
  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SECRET_KEY: "66mL7J+B7J206rCQ7J6Q65Ok7J2Y7ZWt6rO16raM7JiI66ek7ISc67mE7Iqk66W87Iuc7J6R7ZW067SF64uI64uk"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # User Service
  # ---------------------
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8100:8100"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/flight_booking
      DB_USERNAME: postgres
      DB_PASSWORD: systempass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Booking Service
  # ---------------------
  booking-service:
    build: ./booking-service
    container_name: booking-service
    ports:
      - "8120:8120"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/flight_booking
      DB_USERNAME: postgres
      DB_PASSWORD: systempass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8120/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Payment Service
  # ---------------------
  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8130:8130"
    networks:
      - app-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/flight_booking
      DB_USERNAME: postgres
      DB_PASSWORD: systempass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8130/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  # ---------------------
  # Redis
  # ---------------------
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 10
