server:
  port: 8140

service:
  jwt:
    access-expiration: 86400000  # 24시간
    secret-key: ${SECRET_KEY}

spring:
  application:
    name: ticket-service

  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      username: ${REDIS_USERNAME}
      password: ${REDIS_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true

  kafka:
    bootstrap-servers: kafka:9092  # Docker 환경 반영
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: latest  # 최신 메시지부터 소비

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10  # 안정성 강화
        minimumNumberOfCalls: 5
        slowCallRateThreshold: 50  # 느린 호출 비율 50% 조정
        slowCallDurationThreshold: 5000  # 5초 초과 시 느린 호출
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 2
        waitDurationInOpenState: 10s

  timelimiter:
    configs:
      default:
        timeoutDuration: 5s  # 5초 응답 제한 추가

  bulkhead:
    configs:
      default:
        maxConcurrentCalls: 20  # 최대 동시 요청 수 제한
        maxWaitDuration: 10s

management:
  endpoints:
    web:
      exposure:
        include: health, info, refresh, prometheus

  tracing:
    sampling:
      probability: 1.0

  zipkin:
    tracing:
      endpoint: "http://zipkin:9411/api/v2/spans"

  prometheus:
    metrics:
      export:
        enabled: true

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://eureka-server:8761/eureka/}

logging:
  level:
    org.springframework.kafka: INFO
    org.springframework.web: INFO
